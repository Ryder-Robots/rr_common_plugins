#ifndef @FILE_NAME_UC@
#define @FILE_NAME_UC@

#include "rclcpp/logging.hpp"
#include "rr_common_base/rr_constants.hpp"
#include "rr_common_base/rr_subscriber.hpp"
#include "rr_common_plugins/visibility_control.h"
#include <sensor_msgs/image_encodings.hpp>

namespace rr_common_plugins
{
    /**
     * @class @CLASS_NAME@
     * @brief implementation of @CLASS_NAME@ which consumes @MSG_CLASS@
     */
    class @CLASS_NAME@ : public rrobot::@BASE_CLASS@
    {
      public:
        @CLASS_NAME@(std::shared_ptr<rrobot::RrStateMaintainer> state) : topic_param_("@TOPIC_PARAM@"),
                                                                          topic_(@TOPIC@),
                                                                          frame_id_(@FRAME_ID@),
                                                                          state_(state)

        {}

        ~@CLASS_NAME@() = default;

        void callback(const @MSG_CLASS@) override;

        /**
         * @fn get_topic_param
         * 
         * Returns parameter key so that ROS arguments can be used to define the topic override.
         */
        std::string get_topic_param() override
        {
            return topic_param_;
        }

        /**
         * @fn get_topic_default
         * 
         * Default topic to use, this should be correct in most cases.
         */
        std::string get_topic_default() override
        {
            return topic_;
        }

        /**
         * @fn set_logger
         * 
         * Allows factory to override the logger.
         */
        void set_logger(rclcpp::Logger logger) override
        {
            logger_ = logger;
        }

        /**
         * @fn set_state_handler
         * 
         * sets common state maintainer variable.
         */
        void set_state_handler(std::shared_ptr<rrobot::RrStateMaintainer> state) override
        {
            state_ = state;
        }

      protected:
        rclcpp::Logger logger_ = rclcpp::get_logger("subscriber");
        std::string topic_param_;
        std::string topic_;
        std::string frame_id_;
        std::shared_ptr<rrobot::RrStateMaintainer> state_;
    };
} // namespace rr_common_plugins

#endif //@FILE_NAME_UC@